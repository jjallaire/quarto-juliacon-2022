---
title: "Reproducible Publications with Julia and Quarto"
subtitle: "J.J. Allaire (RStudio, PBC)"
date: JuliaCon 2022 
format: 
  revealjs:
    logo: images/quarto.png
    footer: <https://quarto.org>
    css: styles.css
    code-line-numbers: false
    mermaid-format: png
bibliography: references.bib
resources:
  - quarto-juliacon-2022.pdf
---

# Overview

-   Quarto Basics

-   Scientific Markdown

-   Output Formats

-   Quarto and Julia

# Quarto Basics

## What is Quarto?

<https://quarto.org>

Quarto is an open-source scientific and technical publishing system that builds on standard markdown with features essential for scientific communication.

-   Computations: Python, R, Julia, Observable JS
-   Markdown: [Pandoc](https://pandoc.org) w/ many enhancements
-   Output: Documents, presentations, websites, books, blogs

Literate programming system in the tradition of [Org-Mode](https://orgmode.org/), [Sweave](https://en.wikipedia.org/wiki/Sweave), [Weave.jl](https://github.com/JunoLab/Weave.jl), [R Markdown](https://rmarkdown.rstudio.com/), [iPyPublish](https://ipypublish.readthedocs.io/en/latest/), [Jupyter Book](https://jupyterbook.org/), etc.

## Origins

-   Open source project sponsored by RStudio, PBC.
-   10 years of experience with R Markdown (a similar system that was R-specific) convinced us that the core ideas were sound.
-   The number of languages and runtimes used for scientific discourse is very broad.
-   Quarto is a ground-up re-imagining of R Markdown that is fundamentally multi-language and multi-engine.

## Goal: Computational Documents

::: columns
::: {.column width="60%"}
![](images/nature-reproducibility.png)
:::

::: {.column width="40%"}
-   Documents that incorporate the source code required for their production
-   Notebook and plain text flavors
-   Automation and reproducibility
:::
:::

## Goal: Scientific Markdown

![](images/scientific-markdown.png)

## Goal: Single Source Publishing

<https://coko.foundation/articles/single-source-publishing.html>

![](images/single-source-publishing.jpg)

## Simple Example {.smaller}

Markdown document with cross references and executable code blocks:

```` markdown
---
title: "Plots Demo"
author: "Norah Jones"
date: "5/22/2021"
jupyter: julia-1.7
---

## Parametric Plots

Plot function pair (x(u), y(u)). See @fig-parametric for an example.

```{{julia}}
#| label: fig-parametric
#| fig-cap: "Parametric Plot"
#| echo: false

using Plots
plot(sin, x->sin(2x), 0, 2π, leg=false, fill=(0,:lavender))
```
````

Can be rendered to dozens of output formats (via Pandoc):

``` bash
quarto render hello.qmd --to html
quarto render hello.qmd --to pdf
quarto render hello.qmd --to docx
quarto render hello.qmd --to pptx
```

## Rendered Output

::: {layout-ncol="2"}
#### HTML

![](images/hello-html.png){.border}

#### PDF

![](images/hello-pdf.png){.border}
:::

## Rendered Output

::: {layout-ncol="2"}
#### MS Word

![](images/hello-docx.png){.border}

#### PowerPoint

![](images/hello-pptx.png){.border}
:::

## Code Cells {.smaller}

Special syntax indicates that a code block is *executable*:

```` markdown
```{{julia}}
#| echo: false

using Plots
plot(sin, x->sin(2x), 0, 2π, leg=false, fill=(0,:lavender))
```
````

Code is executed and its output is included in the document.

Some useful options for code cells:

| Option      | Description                               |
|-------------|-------------------------------------------|
| `echo`      | Control whether source code is displayed. |
| `output`    | Control whether output is displayed.      |
| `warning`   | Control whether warnings are displayed.   |
| `code-fold` | Fold code using HTML `<details>` tag.     |
| `layout`    | Layout multiple plots side by side.       |

## Rendering Pipeline

Plain text workflow (`.qmd` =\> `.ipynb` then execute cells):

![](images/qmd-how-it-works.png)

Notebook workflow (no execution occurs by default):

![](images/ipynb-how-it-works.png)

# Scientific Markdown

## Brief History

-   [Org-Mode](https://orgmode.org/), [Textile](https://textile-lang.com/), [AsciiDoc](https://asciidoc.org/), and others pioneer plain text authoring.

-   [Markdown](https://daringfireball.net/projects/markdown/) created by [John Gruber](https://en.wikipedia.org/wiki/John_Gruber) and [Aaron Swartz](https://en.wikipedia.org/wiki/Aaron_Swartz) as an easier way to compose HTML

-   Many flavors of Markdown emerge to build upon the core idea ([MultiMarkdown](https://en.wikipedia.org/wiki/MultiMarkdown), [PHP Markdown Extra](https://michelf.ca/projects/php-markdown/extra/), [GitHub Flavored Markdown](https://github.github.com/gfm/), etc.)

-   [Pandoc](https://pandoc.org) created by [John MacFarlane](https://johnmacfarlane.net/index.html) with deeper commitment to scholarly writing (e.g. citations) and publishing (LaTeX)

## Citations {.smaller}

Pandoc includes robust support for citations and bibliographies in a wide variety of formats including [BibTeX](http://www.bibtex.org/), [CSL](https://citationstyles.org/), and [RIS](https://en.wikipedia.org/wiki/RIS_(file_format)).

+-------------------------------------------+-------------------------------------------------------------------+
| Markdown Syntax                           | Output                                                            |
+===========================================+===================================================================+
|     Blah Blah [see @knuth1984, pp. 33-35; | Blah Blah [see @knuth1984, pp. 33-35; also @wickham2015, chap. 1] |
|     also @wickham2015, chap. 1]           |                                                                   |
+-------------------------------------------+-------------------------------------------------------------------+
|     Blah Blah [@knuth1984, pp. 33-35,     | Blah Blah [@knuth1984, pp. 33-35, 38-39 and passim]               |
|     38-39 and passim]                     |                                                                   |
+-------------------------------------------+-------------------------------------------------------------------+
|     Blah Blah [@wickham2015; @knuth1984]. | Blah Blah [@wickham2015; @knuth1984].                             |
+-------------------------------------------+-------------------------------------------------------------------+
|     Wickham says blah [-@wickham2015]     | Wickham says blah [-@wickham2015]                                 |
+-------------------------------------------+-------------------------------------------------------------------+

More than [10,000 citation output styles](https://www.zotero.org/styles) supported via CSL (Citation Style Language):

``` yaml
---
title: "My ARticle"
bibliography: references.bib
csl: nature.csl
---
```

## Cross References {.smaller}

![](images/crossref-subfigures.png){.border width="80%"}

Cross reference figures, tables, equations, sections, theorems, etc.

Markdown: <https://quarto.org/docs/authoring/cross-references.html#subfigures>

Julia cell: <https://quarto.org/docs/computations/julia.html#code-blocks>

## Figure/Layout Panels {.smaller}

::: columns
::: {.column width="47%"}
-   Arbitrary layout of figures and tables:

    ``` markdown
    ::: {layout="[[40,-20,40], [100]]"}
    ![Surus](surus.png)
    ![Hanno](hanno.png)
    ![Lin Wang](lin-wang.png)
    :::
    ```

-   Shorthand syntax (`layout-ncol` or `layout-nrow`) available for simple cases:

    ``` markdown
    ::: {layout-ncol="2"}
    Block 1

    Block 2
    :::
    ```
:::

::: {.column width="5%"}
:::

::: {.column width="48%"}
![](images/layout-attrib-negative.png)
:::
:::

Also works for code chunks that produce figures and tables: <https://quarto.org/docs/authoring/figures.html#computations>

## Callouts {.smaller}

Work in HTML, PDF, MS Word, Revealjs, and ePub output

![](images/callouts.png){width="90%"}

## Advanced Page Layout

Portable markdown syntax for advanced grid/column layout in HTML and PDF

-   Figures and tables that span the entire page
-   Use of margin for figures, equations, captions, asides, footnotes, and citations
-   Responsive show/hide of site navigation and TOC

Docs: <https://quarto.org/docs/authoring/article-layout.html>

## Diagrams

Quarto has native support for embedding [Mermaid](https://mermaid-js.github.io/mermaid/#/) and [Graphviz](https://graphviz.org/) diagrams.

```{mermaid}
%%| echo: fenced
flowchart LR
  A[Hard edge] --> B(Round edge)
  B --> C{Decision}
  C --> D[Result one]
  C --> E[Result two]
```

# Output Formats

## Documents {.smaller}

Pandoc supports a huge array of output formats, all of which can be used with Quarto.

-   HTML
-   PDF
-   MS Word
-   Open Office
-   JATS (Journal Article Tag Suite)
-   ConTeXt
-   RTF
-   AsciiDoc
-   Markdown (gfm, hugo, etc.)

Example: [GitHub Languages Analysis (PDF)](https://github.com/AlissonRP/gh_langs/raw/slides/report.pdf)

## Presentations

Quarto supports a variety of formats for creating presentations, including:

-   revealjs --- reveal.js (HTML)
-   pptx --- PowerPoint (MS Office)
-   beamer --- Beamer (LaTeX/PDF)

Revealjs supports many advanced features including speaker notes, animations, custom backgrounds, and printing to PDF.

Example: [JunctionTrees.jl: Efficient Bayesian Inference in Discrete Graphical Models](https://mroavi.github.io/juliacon-2022)

## Websites

-   Convenient way to publish groups of documents.

-   Arbitrary content depth / organization

-   Multi-level navigation (navbar / sidebar / hybrid)

-   Full text search (client side or Algolia)

Example: [Julia Workshop for Data Science](https://crsl4.github.io/julia-workshop/)

Example: [Quarto Website](https://quarto.org)

## Books

-   Inherit features of Quarto websites (navigation, search, etc.)

-   Support cross references across chapters

-   Formats include HTML, PDF, MS Word, and ePub

Example: [Embrace Uncertainty: Mixed-effects models with Julia](https://juliamixedmodels.github.io/EmbraceUncertainty)

## Blogs

-   Inherit features of Quarto websites (navigation, search, etc.)

-   Automatically generated listing and RSS feed

-   Customizable about page

Example: [Patrick Altmeyer's Blog](https://www.paltmeyer.com/blog/)

# Quarto and Julia

## Prerequisites

Quarto executes Julia computations using its Jupyter engine (so Jupyter itself is a prereq):

``` bash
pip3 install jupyter
```

The [IJulia kernel](https://julialang.github.io/IJulia.jl/stable) is required, and [Revise.jl](https://timholy.github.io/Revise.jl) recommended:

``` julia
julia> using Pkg
julia> Pkg.add("IJulia")
julia> Pkg.add("Revise")
```

## Basic Workflow

Rendering:

``` bash
# plain text qmd
quarto render julia.qmd 
quarto render julia.qmd --to pdf

## ipynb notebook
quarto render julia.ipynb
quarto render julia.ipynb --to docx
```

Preview:

``` bash
# plain text qmd
quarto preview julia.qmd 
quarto preview julia.qmd --to pdf

## ipynb notebook
quarto preview julia.ipynb
quarto preview julia.ipynb --to docx
```

##  {background-image="images/jupyterlab.png" background-size="contain"}

::: footer
:::

## IJulia

-   The IJulia Jupyter kernel is bound automatically when `{julia}` executable cells are present. A specific version of the kernel can be bound in document options:

    ``` {.yaml code-line-numbers="false"}
    jupyter: julia-1.7
    ```

-   IJulia executes Julia code and transforms it to plain text, graphics, markdown, HTML, etc.

-   For interactive sessions, Quarto keeps the Jupyter kernel resident as a daemon to mitigate long startup time.

-   Revise.jl is (optionally) used to sync changes to dependent files/packages that occur while the daemon is running.

## IJulia Figures

-   Quarto provides default figure sizes and formats (e.g. PNG vs. SVG vs. PDF) that are format dependent (e.g. HTML, PDF, MS Word, PowerPoint, etc.)

-   These are propagated to Julia in a setup cell that sets global defaults for some plotting packages (currently `Plots` and `CairoMakie`)

-   Better approach would be if Julia plotting packages could automatically detect when they are running in Quarto and set their defaults accordingly

## Performance Considerations

-   **Startup performance** --- How long does it take to load the interpreter + packages and how often do I need to do that?

-   **Rendering performance** --- How expensive are my computations and how frequently do I need to run them?

## Startup Performance

-   For interactive sessions, Jupyter kernels are kept alive to mitigate startup costs (`hello.qmd` example from earlier takes \~ 30 seconds on first run but less than 0.5 seconds on subsequent runs within the same session)

-   This is convenient but creates the problem of stale code (e.g. referenced files are changed, packages are updated, etc.). The solution to this is [Revise.jl](https://timholy.github.io/Revise.jl), a library that helps you keep your Julia sessions running longer, reducing the need to restart when you make changes to code.

## Revise.jl

Install Revise.jl:

``` julia
julia> Pkg.add("Revise")
```

<br/>

Configure to launch automatically within IJulia:

`.julia/config/startup_ijulia.jl`

``` julia
try
  @eval using Revise
catch e
  @warn "Revise init" exception=(e, catch_backtrace())
end
```

## Rendering Performance

1.  Authoring in `.ipynb` enables you to control exactly when code execution occurs (and cache the results in the the notebook)

2.  [Jupyter Cache](https://jupyter-cache.readthedocs.io/en/latest/) provides transient caching of cell outputs for a document (if any of the cells in the document change then all of the cells will be re-executed).

3.  Quarto's [Freeze](https://quarto.org/docs/projects/code-execution.html#freeze) feature enables you to permanently save and re-use computational outputs.

## Why IJulia?

-   Aligned with architectural investments we had already made for Jupyter (e.g. kernel daemonization, execution result caching)

-   `IJulia.display` function provides support for MIME outputs from Julia results (including raw LaTeX/HTML)

-   Ability to author in various popular notebook front ends (JupyterLab, VS Code, etc.)

Other literate programming systems (Pluto, Neptune, etc.) could certainly be integrated as an alternative to IJulia.

## Tools: VS Code {.smaller}

<https://marketplace.visualstudio.com/items?itemName=quarto.quarto>

-   Render command with integrated preview pane
-   Syntax highlighting for markdown and embedded languages
-   Completion for embedded languages (e.g. Python, R, Julia, LaTeX, etc.)
-   Completion and diagnostics for project files and document/cell options
-   Commands and key-bindings for running cells and selected line(s)
-   Live preview for embedded mermaid and graphviz diagrams
-   Assist panel for contextual help, image preview, and math preview
-   Code snippets for common markdown constructs
-   Code folding and document outline for navigation within documents
-   Workspace symbol provider for navigation across project files

##  {background-image="images/vscode-render.png" background-size="contain"}

::: footer
:::

##  {background-image="images/vscode-runcell.png" background-size="contain"}

::: footer
:::

##  {background-image="images/vscode-completion.png" background-size="contain"}

::: footer
:::

## Tools: Jupyter Lab

![](images/jupyterlab.png){.border}

## Tools: Text Editors

-   Use `quarto preview` with any text editor:

    ``` {.bash code-line-numbers="false"}
    $ quarto preview julia.qmd
    ```

    Live reloading for documents and websites/books.

-   Quarto modes/extensions for various editors:

    -   Emacs: <https://github.com/quarto-dev/quarto-emacs>
    -   Vim: <https://github.com/quarto-dev/quarto-vim>
    -   Neovim: <https://github.com/jmbuhr/quarto-nvim>

## Thank You!

-   Slides: <https://jjallaire.github.io/quarto-juliacon-2022/>

-   Learning More

    -   Getting Started: <https://quarto.org/docs/get-started/>

    -   Quarto and Julia: <https://quarto.org/docs/computations/julia.html>

    -   About the Project: <https://quarto.org/about.html>

-   Talk to us at <https://github.com/quarto-dev/quarto-cli/discussions>

-   Questions?
